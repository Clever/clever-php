<?php
/**
 * EventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Clever
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Clever\Api;

use \Clever\ApiClient;
use \Clever\ApiException;
use \Clever\Configuration;
use \Clever\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Clever
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsApi
{
    /**
     * API Client
     *
     * @var \Clever\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Clever\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Clever\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Clever\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Clever\ApiClient $apiClient set the API client
     *
     * @return EventsApi
     */
    public function setApiClient(\Clever\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getEvent
     *
     * @param string $id  (required)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventResponse
     */
    public function getEvent($id)
    {
        list($response) = $this->getEventWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEventWithHttpInfo
     *
     * @param string $id  (required)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEvent');
        }
        // parse inputs
        $resourcePath = "/events/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventResponse',
                '/events/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEvents
     *
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventsResponse
     */
    public function getEvents($limit = null, $starting_after = null, $ending_before = null)
    {
        list($response) = $this->getEventsWithHttpInfo($limit, $starting_after, $ending_before);
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsWithHttpInfo($limit = null, $starting_after = null, $ending_before = null)
    {
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = $this->apiClient->getSerializer()->toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = $this->apiClient->getSerializer()->toQueryValue($ending_before);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventsResponse',
                '/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEventsForSchool
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventsResponse
     */
    public function getEventsForSchool($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        list($response) = $this->getEventsForSchoolWithHttpInfo($id, $limit, $starting_after, $ending_before);
        return $response;
    }

    /**
     * Operation getEventsForSchoolWithHttpInfo
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsForSchoolWithHttpInfo($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEventsForSchool');
        }
        // parse inputs
        $resourcePath = "/schools/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = $this->apiClient->getSerializer()->toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = $this->apiClient->getSerializer()->toQueryValue($ending_before);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventsResponse',
                '/schools/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEventsForSchoolAdmin
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventsResponse
     */
    public function getEventsForSchoolAdmin($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        list($response) = $this->getEventsForSchoolAdminWithHttpInfo($id, $limit, $starting_after, $ending_before);
        return $response;
    }

    /**
     * Operation getEventsForSchoolAdminWithHttpInfo
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsForSchoolAdminWithHttpInfo($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEventsForSchoolAdmin');
        }
        // parse inputs
        $resourcePath = "/school_admins/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = $this->apiClient->getSerializer()->toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = $this->apiClient->getSerializer()->toQueryValue($ending_before);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventsResponse',
                '/school_admins/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEventsForSection
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventsResponse
     */
    public function getEventsForSection($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        list($response) = $this->getEventsForSectionWithHttpInfo($id, $limit, $starting_after, $ending_before);
        return $response;
    }

    /**
     * Operation getEventsForSectionWithHttpInfo
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsForSectionWithHttpInfo($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEventsForSection');
        }
        // parse inputs
        $resourcePath = "/sections/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = $this->apiClient->getSerializer()->toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = $this->apiClient->getSerializer()->toQueryValue($ending_before);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventsResponse',
                '/sections/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEventsForStudent
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventsResponse
     */
    public function getEventsForStudent($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        list($response) = $this->getEventsForStudentWithHttpInfo($id, $limit, $starting_after, $ending_before);
        return $response;
    }

    /**
     * Operation getEventsForStudentWithHttpInfo
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsForStudentWithHttpInfo($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEventsForStudent');
        }
        // parse inputs
        $resourcePath = "/students/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = $this->apiClient->getSerializer()->toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = $this->apiClient->getSerializer()->toQueryValue($ending_before);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventsResponse',
                '/students/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEventsForTeacher
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return \Clever\Model\EventsResponse
     */
    public function getEventsForTeacher($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        list($response) = $this->getEventsForTeacherWithHttpInfo($id, $limit, $starting_after, $ending_before);
        return $response;
    }

    /**
     * Operation getEventsForTeacherWithHttpInfo
     *
     * @param string $id  (required)
     * @param int $limit  (optional)
     * @param string $starting_after  (optional)
     * @param string $ending_before  (optional)
     * @throws \Clever\ApiException on non-2xx response
     * @return array of \Clever\Model\EventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsForTeacherWithHttpInfo($id, $limit = null, $starting_after = null, $ending_before = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEventsForTeacher');
        }
        // parse inputs
        $resourcePath = "/teachers/{id}/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($starting_after !== null) {
            $queryParams['starting_after'] = $this->apiClient->getSerializer()->toQueryValue($starting_after);
        }
        // query params
        if ($ending_before !== null) {
            $queryParams['ending_before'] = $this->apiClient->getSerializer()->toQueryValue($ending_before);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Clever\Model\EventsResponse',
                '/teachers/{id}/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Clever\Model\EventsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\EventsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Clever\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
